"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var drawerlayout_1 = require("../drawerlayout");
var coordinatorlayout_1 = require("../coordinatorlayout");
var componentsmaterial_1 = require("../componentsmaterial");
var appcompat_1 = require("../appcompat");
var core_1 = require("../core");
var main_1 = require("../main");
describe('testing element', function () {
    test('single option is set', function () {
        var layout = drawerlayout_1.DrawerLayout({ colorPrimaryDark: 'white' }).build();
        var drawerLayout = layout.map.drawerLayout;
        expect(drawerLayout.attributes.colorPrimaryDark).toEqual('white');
    });
    test('single child is set', function () {
        var layout = drawerlayout_1.DrawerLayout({}, [coordinatorlayout_1.CoordinatorLayout({ id: 'test' })]).build();
        var drawerLayout = layout.map.drawerLayout;
        expect(drawerLayout).toHaveProperty("children");
        var children = drawerLayout.children;
        expect(children[0]).toEqual('drawerLayout_coordinatorLayout');
        var coordinatorLayout = layout.map.drawerLayout_coordinatorLayout;
        expect(coordinatorLayout.attributes.id).toEqual('test');
    });
    test('single child and option is set', function () {
        var layout = drawerlayout_1.DrawerLayout({ id: 'noot' }, [coordinatorlayout_1.CoordinatorLayout()]).build();
        var drawerLayout = layout.map.drawerLayout;
        expect(drawerLayout).toHaveProperty("children");
        var children = drawerLayout.children;
        expect(children[0]).toEqual('drawerLayout_coordinatorLayout');
        expect(drawerLayout.attributes.id).toEqual('noot');
    });
    test('drawer with navigation layout', function () {
        var layout = drawerlayout_1.DrawerLayout({ layout_width: "match_parent", layout_height: "match_parent" }, [
            coordinatorlayout_1.CoordinatorLayout({ background: "#FEFEFE" }, [
                componentsmaterial_1.AppBarLayout({ layout_height: "290dp" }, [
                    appcompat_1.AppcompatToolbar({ title: 'Navigation Playground' }),
                ]),
                core_1.NestedScrollView({}, [main_1.LinearLayout({ orientation: main_1.MainTypes.OrientationEnum.vertical })]),
            ]),
            componentsmaterial_1.NavigationView({
                layout_gravity: [
                    drawerlayout_1.DrawerlayoutTypes.LayoutGravityFlagsEnum.start,
                    drawerlayout_1.DrawerlayoutTypes.LayoutGravityFlagsEnum.left
                ]
            }),
        ]).build();
        var appBarLayout = layout.map.drawerLayout_coordinatorLayout_appBarLayout;
        expect(appBarLayout.attributes.layout_height).toEqual("290dp");
        expect(appBarLayout).toHaveProperty("children");
        var nestedScrollView = layout.map.drawerLayout_coordinatorLayout_nestedScrollView;
        var children = nestedScrollView.children;
        expect(children[0]).toEqual('drawerLayout_coordinatorLayout_nestedScrollView_linearLayout');
        var navigationView = layout.map.drawerLayout_navigationView;
        expect(navigationView.attributes.layout_gravity).toEqual(['start', 'left']);
    });
    test('converts to json array', function () {
        var layout = drawerlayout_1.DrawerLayout({ layout_width: "match_parent", layout_height: "match_parent" }, [
            coordinatorlayout_1.CoordinatorLayout({ background: "#FEFEFE" }, [
                componentsmaterial_1.AppBarLayout({ layout_height: "290dp" }, [
                    appcompat_1.AppcompatToolbar({ title: 'Navigation Playground' }),
                ]),
                core_1.NestedScrollView({}, [main_1.LinearLayout({ orientation: main_1.MainTypes.OrientationEnum.vertical })]),
            ]),
            componentsmaterial_1.NavigationView({
                layout_gravity: [
                    drawerlayout_1.DrawerlayoutTypes.LayoutGravityFlagsEnum.start,
                    drawerlayout_1.DrawerlayoutTypes.LayoutGravityFlagsEnum.left
                ]
            }),
        ]).build();
        //console.log(layout.toJson());
        expect(layout.toJson()).toEqual(jsonOutput);
    });
});
// tslint:disable-next-line:max-line-length
var jsonOutput = '[{"id":"drawerLayout","type":"drawerLayout","attributes":{"layout_width":"match_parent","layout_height":"match_parent"},"children":["drawerLayout_coordinatorLayout","drawerLayout_navigationView"]},{"id":"drawerLayout_coordinatorLayout","type":"coordinatorLayout","attributes":{"background":"#FEFEFE"},"children":["drawerLayout_coordinatorLayout_appBarLayout","drawerLayout_coordinatorLayout_nestedScrollView"]},{"id":"drawerLayout_coordinatorLayout_appBarLayout","type":"appBarLayout","attributes":{"layout_height":"290dp"},"children":["drawerLayout_coordinatorLayout_appBarLayout_appcompat.toolbar"]},{"id":"drawerLayout_coordinatorLayout_appBarLayout_appcompat.toolbar","type":"appcompat.toolbar","attributes":{"title":"Navigation Playground"},"children":[]},{"id":"drawerLayout_coordinatorLayout_nestedScrollView","type":"nestedScrollView","attributes":{},"children":["drawerLayout_coordinatorLayout_nestedScrollView_linearLayout"]},{"id":"drawerLayout_coordinatorLayout_nestedScrollView_linearLayout","type":"linearLayout","attributes":{"orientation":"vertical"},"children":[]},{"id":"drawerLayout_navigationView","type":"navigationView","attributes":{"layout_gravity":["start","left"]},"children":[]}]';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,