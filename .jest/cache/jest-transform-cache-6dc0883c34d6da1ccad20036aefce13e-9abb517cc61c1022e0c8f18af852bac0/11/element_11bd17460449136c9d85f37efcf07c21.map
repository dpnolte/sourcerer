{"file":"/Users/derk/jsProjects/sourcerer/js/element.ts","mappings":";;AAmBa,QAAA,OAAO,GAAG,UACrB,IAAY,EACZ,kBAAsD,EACtD,gBAAuD;IAEvD,IAAM,UAAU,GAAG,OAAO,kBAAkB,KAAK,WAAW,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC;IACvF,IAAM,QAAQ,GAAG,OAAO,gBAAgB,KAAK,WAAW,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC;IACjF,IAAM,SAAS,GAAG;QAChB,IAAM,GAAG,GAAG,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QACrD,OAAO,EAAE,GAAG,KAAA,EAAE,MAAM,EAAE,cAAM,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,EAAE,CAAC;IAC/C,CAAC,CAAC;IACF,OAAO;QACJ,UAAU,YAAA;QACV,QAAQ,UAAA;QACR,IAAI,MAAA;QACJ,KAAK,EAAE,SAAS;KAClB,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,YAAY,GAAG,UACnB,IAAY,EACZ,UAAe,EACf,aAAoD,EACpD,GAAoB,EACpB,SAAsB;IADtB,oBAAA,EAAA,QAAoB;IACpB,0BAAA,EAAA,cAAsB;IAEtB,IAAM,GAAG,GAAG,SAAS,KAAK,EAAE,CAAC,CAAC,CAAI,SAAS,SAAI,IAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7D,IAAM,QAAQ,GAAU,EAAE,CAAC;IAC3B,GAAG,CAAC,GAAG,CAAC,GAAI;QACV,EAAE,EAAE,GAAG;QACP,IAAI,MAAA;QACJ,UAAU,YAAA;QACV,QAAQ,UAAA;KACT,CAAC;IACF,aAAa,CAAC,OAAO,CAAC,UAAA,YAAY;QAChC,IAAM,QAAQ,GAAM,GAAG,SAAI,YAAY,CAAC,IAAgB,CAAA;QACxD,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxB,YAAY,CACV,YAAY,CAAC,IAAI,EACjB,YAAY,CAAC,UAAU,EACvB,YAAY,CAAC,QAAQ,EACrB,GAAG,EACH,GAAG,CACJ,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,4BAA4B;AAC5B,IAAM,SAAS,GAAG,UAAC,GAAQ;IACzB,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAE,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,GAAG,CAAC,EAAR,CAAQ,CAAC,CAAC;IACpD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAC9B,CAAC,CAAC","names":[],"sources":["/Users/derk/jsProjects/sourcerer/js/element.ts"],"sourcesContent":["export interface ElementNode<ViewAttributes, LayoutAttributes> {\n  attributes: ViewAttributes & LayoutAttributes | {};\n  type: string;\n  children: Array<ElementNode<unknown, unknown>>;\n  build: () => LayoutMap;\n}\nexport interface ElementMap {\n  [key: string]: ViewBase<unknown, unknown>\n}\nexport interface LayoutMap {\n  map: ElementMap;\n  toJson: () => string;\n}\nexport interface ViewBase<ViewAttributes, LayoutAttributes = {}> {\n  id: string;\n  attributes: ViewAttributes & LayoutAttributes;\n  type: string;\n  children?: Array<String>;\n}\nexport const element = <ViewAttributes extends {}, LayoutAttributes extends {}> (\n  type: string,\n  providedAttributes?: ViewAttributes & LayoutAttributes,\n  providedChildren?: Array<ElementNode<unknown, unknown>>\n): ElementNode<ViewAttributes, LayoutAttributes>  => {\n  const attributes = typeof providedAttributes !== 'undefined' ? providedAttributes : {};\n  const children = typeof providedChildren !== 'undefined' ? providedChildren : [];\n  const buildRoot = (): LayoutMap  => {\n    const map = flatMapNodes(type, attributes, children);\n    return { map, toJson: () => mapToJson(map) };\n  };\n  return {\n     attributes,\n     children,\n     type,\n     build: buildRoot,\n  };\n};\n\nconst flatMapNodes = (\n  type: string,\n  attributes: any,\n  childElements:  Array<ElementNode<unknown, unknown>>,\n  map: ElementMap = {},\n  keyPrefix: string = ''\n): ElementMap => {\n  const key = keyPrefix !== '' ? `${keyPrefix}_${type}` : type;\n  const children: any[] = [];\n  map[key]  = {\n    id: key,\n    type,\n    attributes,\n    children,\n  };\n  childElements.forEach(childElement => {\n    const childKey = `${key}_${childElement.type}` as String\n    children.push(childKey);\n    flatMapNodes(\n      childElement.type,\n      childElement.attributes,\n      childElement.children,\n      map,\n      key\n    );\n  });\n  return map;\n};\n\n// from object to json array\nconst mapToJson = (map: any): string => {\n  const list = Object.keys(map).map (key => map[key]);\n  return JSON.stringify(list);\n};\n"],"version":3}