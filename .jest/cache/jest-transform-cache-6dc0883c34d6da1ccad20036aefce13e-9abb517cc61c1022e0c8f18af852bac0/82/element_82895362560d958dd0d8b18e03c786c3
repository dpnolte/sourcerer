aa66cfe3980c9ba1b6ffc51b47ce6c29
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.element = function (type, providedAttributes, providedChildren) {
    var attributes = typeof providedAttributes !== 'undefined' ? providedAttributes : {};
    var children = typeof providedChildren !== 'undefined' ? providedChildren : [];
    var buildRoot = function () {
        var map = flatMapNodes(type, attributes, children);
        return { map: map, toJson: function () {
                return mapToJson(map);
            } };
    };
    return {
        attributes: attributes,
        children: children,
        type: type,
        build: buildRoot
    };
};
var flatMapNodes = function (type, attributes, childElements, map, keyPrefix) {
    if (map === void 0) {
        map = {};
    }
    if (keyPrefix === void 0) {
        keyPrefix = '';
    }
    var key = keyPrefix !== '' ? keyPrefix + "_" + type : type;
    var children = [];
    map[key] = {
        id: key,
        type: type,
        attributes: attributes,
        children: children
    };
    childElements.forEach(function (childElement) {
        var childKey = key + "_" + childElement.type;
        children.push(childKey);
        flatMapNodes(childElement.type, childElement.attributes, childElement.children, map, key);
    });
    return map;
};
// from object to json array
var mapToJson = function (map) {
    var list = Object.keys(map).map(function (key) {
        return map[key];
    });
    return JSON.stringify(list);
};
//# sourceMappingURL=element.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZW1lbnQuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbGVtZW50IiwidHlwZSIsInByb3ZpZGVkQXR0cmlidXRlcyIsInByb3ZpZGVkQ2hpbGRyZW4iLCJhdHRyaWJ1dGVzIiwiY2hpbGRyZW4iLCJidWlsZFJvb3QiLCJtYXAiLCJmbGF0TWFwTm9kZXMiLCJ0b0pzb24iLCJtYXBUb0pzb24iLCJidWlsZCIsImNoaWxkRWxlbWVudHMiLCJrZXlQcmVmaXgiLCJrZXkiLCJpZCIsImZvckVhY2giLCJjaGlsZEVsZW1lbnQiLCJjaGlsZEtleSIsInB1c2giLCJsaXN0Iiwia2V5cyIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQUQsUUFBUUUsT0FBUixHQUFrQixVQUFVQyxJQUFWLEVBQWdCQyxrQkFBaEIsRUFBb0NDLGdCQUFwQyxFQUFzRDtBQUNwRSxRQUFJQyxhQUFhLE9BQU9GLGtCQUFQLEtBQThCLFdBQTlCLEdBQTRDQSxrQkFBNUMsR0FBaUUsRUFBbEY7QUFDQSxRQUFJRyxXQUFXLE9BQU9GLGdCQUFQLEtBQTRCLFdBQTVCLEdBQTBDQSxnQkFBMUMsR0FBNkQsRUFBNUU7QUFDQSxRQUFJRyxZQUFZLFlBQVk7QUFDeEIsWUFBSUMsTUFBTUMsYUFBYVAsSUFBYixFQUFtQkcsVUFBbkIsRUFBK0JDLFFBQS9CLENBQVY7QUFDQSxlQUFPLEVBQUVFLEtBQUtBLEdBQVAsRUFBWUUsUUFBUSxZQUFZO0FBQUUsdUJBQU9DLFVBQVVILEdBQVYsQ0FBUDtBQUF3QixhQUExRCxFQUFQO0FBQ0gsS0FIRDtBQUlBLFdBQU87QUFDSEgsb0JBQVlBLFVBRFQ7QUFFSEMsa0JBQVVBLFFBRlA7QUFHSEosY0FBTUEsSUFISDtBQUlIVSxlQUFPTDtBQUpKLEtBQVA7QUFNSCxDQWJEO0FBY0EsSUFBSUUsZUFBZSxVQUFVUCxJQUFWLEVBQWdCRyxVQUFoQixFQUE0QlEsYUFBNUIsRUFBMkNMLEdBQTNDLEVBQWdETSxTQUFoRCxFQUEyRDtBQUMxRSxRQUFJTixRQUFRLEtBQUssQ0FBakIsRUFBb0I7QUFBRUEsY0FBTSxFQUFOO0FBQVc7QUFDakMsUUFBSU0sY0FBYyxLQUFLLENBQXZCLEVBQTBCO0FBQUVBLG9CQUFZLEVBQVo7QUFBaUI7QUFDN0MsUUFBSUMsTUFBTUQsY0FBYyxFQUFkLEdBQW1CQSxZQUFZLEdBQVosR0FBa0JaLElBQXJDLEdBQTRDQSxJQUF0RDtBQUNBLFFBQUlJLFdBQVcsRUFBZjtBQUNBRSxRQUFJTyxHQUFKLElBQVc7QUFDUEMsWUFBSUQsR0FERztBQUVQYixjQUFNQSxJQUZDO0FBR1BHLG9CQUFZQSxVQUhMO0FBSVBDLGtCQUFVQTtBQUpILEtBQVg7QUFNQU8sa0JBQWNJLE9BQWQsQ0FBc0IsVUFBVUMsWUFBVixFQUF3QjtBQUMxQyxZQUFJQyxXQUFXSixNQUFNLEdBQU4sR0FBWUcsYUFBYWhCLElBQXhDO0FBQ0FJLGlCQUFTYyxJQUFULENBQWNELFFBQWQ7QUFDQVYscUJBQWFTLGFBQWFoQixJQUExQixFQUFnQ2dCLGFBQWFiLFVBQTdDLEVBQXlEYSxhQUFhWixRQUF0RSxFQUFnRkUsR0FBaEYsRUFBcUZPLEdBQXJGO0FBQ0gsS0FKRDtBQUtBLFdBQU9QLEdBQVA7QUFDSCxDQWpCRDtBQWtCQTtBQUNBLElBQUlHLFlBQVksVUFBVUgsR0FBVixFQUFlO0FBQzNCLFFBQUlhLE9BQU94QixPQUFPeUIsSUFBUCxDQUFZZCxHQUFaLEVBQWlCQSxHQUFqQixDQUFxQixVQUFVTyxHQUFWLEVBQWU7QUFBRSxlQUFPUCxJQUFJTyxHQUFKLENBQVA7QUFBa0IsS0FBeEQsQ0FBWDtBQUNBLFdBQU9RLEtBQUtDLFNBQUwsQ0FBZUgsSUFBZixDQUFQO0FBQ0gsQ0FIRDtBQUlBIiwiZmlsZSI6ImVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBwcm92aWRlZEF0dHJpYnV0ZXMsIHByb3ZpZGVkQ2hpbGRyZW4pIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHR5cGVvZiBwcm92aWRlZEF0dHJpYnV0ZXMgIT09ICd1bmRlZmluZWQnID8gcHJvdmlkZWRBdHRyaWJ1dGVzIDoge307XG4gICAgdmFyIGNoaWxkcmVuID0gdHlwZW9mIHByb3ZpZGVkQ2hpbGRyZW4gIT09ICd1bmRlZmluZWQnID8gcHJvdmlkZWRDaGlsZHJlbiA6IFtdO1xuICAgIHZhciBidWlsZFJvb3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtYXAgPSBmbGF0TWFwTm9kZXModHlwZSwgYXR0cmlidXRlcywgY2hpbGRyZW4pO1xuICAgICAgICByZXR1cm4geyBtYXA6IG1hcCwgdG9Kc29uOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXBUb0pzb24obWFwKTsgfSB9O1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlcyxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBidWlsZDogYnVpbGRSb290LFxuICAgIH07XG59O1xudmFyIGZsYXRNYXBOb2RlcyA9IGZ1bmN0aW9uICh0eXBlLCBhdHRyaWJ1dGVzLCBjaGlsZEVsZW1lbnRzLCBtYXAsIGtleVByZWZpeCkge1xuICAgIGlmIChtYXAgPT09IHZvaWQgMCkgeyBtYXAgPSB7fTsgfVxuICAgIGlmIChrZXlQcmVmaXggPT09IHZvaWQgMCkgeyBrZXlQcmVmaXggPSAnJzsgfVxuICAgIHZhciBrZXkgPSBrZXlQcmVmaXggIT09ICcnID8ga2V5UHJlZml4ICsgXCJfXCIgKyB0eXBlIDogdHlwZTtcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICBtYXBba2V5XSA9IHtcbiAgICAgICAgaWQ6IGtleSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlcyxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIH07XG4gICAgY2hpbGRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkS2V5ID0ga2V5ICsgXCJfXCIgKyBjaGlsZEVsZW1lbnQudHlwZTtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZEtleSk7XG4gICAgICAgIGZsYXRNYXBOb2RlcyhjaGlsZEVsZW1lbnQudHlwZSwgY2hpbGRFbGVtZW50LmF0dHJpYnV0ZXMsIGNoaWxkRWxlbWVudC5jaGlsZHJlbiwgbWFwLCBrZXkpO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXA7XG59O1xuLy8gZnJvbSBvYmplY3QgdG8ganNvbiBhcnJheVxudmFyIG1hcFRvSnNvbiA9IGZ1bmN0aW9uIChtYXApIHtcbiAgICB2YXIgbGlzdCA9IE9iamVjdC5rZXlzKG1hcCkubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIG1hcFtrZXldOyB9KTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobGlzdCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxlbWVudC5qcy5tYXAiXX0=