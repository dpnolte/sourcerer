{"version":3,"sources":["element.js"],"names":["Object","defineProperty","exports","value","element","type","providedAttributes","providedChildren","attributes","children","buildRoot","map","flatMapNodes","toJson","mapToJson","build","childElements","keyPrefix","key","id","forEach","childElement","childKey","push","list","keys","JSON","stringify"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACAD,QAAQE,OAAR,GAAkB,UAAUC,IAAV,EAAgBC,kBAAhB,EAAoCC,gBAApC,EAAsD;AACpE,QAAIC,aAAa,OAAOF,kBAAP,KAA8B,WAA9B,GAA4CA,kBAA5C,GAAiE,EAAlF;AACA,QAAIG,WAAW,OAAOF,gBAAP,KAA4B,WAA5B,GAA0CA,gBAA1C,GAA6D,EAA5E;AACA,QAAIG,YAAY,YAAY;AACxB,YAAIC,MAAMC,aAAaP,IAAb,EAAmBG,UAAnB,EAA+BC,QAA/B,CAAV;AACA,eAAO,EAAEE,KAAKA,GAAP,EAAYE,QAAQ,YAAY;AAAE,uBAAOC,UAAUH,GAAV,CAAP;AAAwB,aAA1D,EAAP;AACH,KAHD;AAIA,WAAO;AACHH,oBAAYA,UADT;AAEHC,kBAAUA,QAFP;AAGHJ,cAAMA,IAHH;AAIHU,eAAOL;AAJJ,KAAP;AAMH,CAbD;AAcA,IAAIE,eAAe,UAAUP,IAAV,EAAgBG,UAAhB,EAA4BQ,aAA5B,EAA2CL,GAA3C,EAAgDM,SAAhD,EAA2D;AAC1E,QAAIN,QAAQ,KAAK,CAAjB,EAAoB;AAAEA,cAAM,EAAN;AAAW;AACjC,QAAIM,cAAc,KAAK,CAAvB,EAA0B;AAAEA,oBAAY,EAAZ;AAAiB;AAC7C,QAAIC,MAAMD,cAAc,EAAd,GAAmBA,YAAY,GAAZ,GAAkBZ,IAArC,GAA4CA,IAAtD;AACA,QAAII,WAAW,EAAf;AACAE,QAAIO,GAAJ,IAAW;AACPC,YAAID,GADG;AAEPb,cAAMA,IAFC;AAGPG,oBAAYA,UAHL;AAIPC,kBAAUA;AAJH,KAAX;AAMAO,kBAAcI,OAAd,CAAsB,UAAUC,YAAV,EAAwB;AAC1C,YAAIC,WAAWJ,MAAM,GAAN,GAAYG,aAAahB,IAAxC;AACAI,iBAASc,IAAT,CAAcD,QAAd;AACAV,qBAAaS,aAAahB,IAA1B,EAAgCgB,aAAab,UAA7C,EAAyDa,aAAaZ,QAAtE,EAAgFE,GAAhF,EAAqFO,GAArF;AACH,KAJD;AAKA,WAAOP,GAAP;AACH,CAjBD;AAkBA;AACA,IAAIG,YAAY,UAAUH,GAAV,EAAe;AAC3B,QAAIa,OAAOxB,OAAOyB,IAAP,CAAYd,GAAZ,EAAiBA,GAAjB,CAAqB,UAAUO,GAAV,EAAe;AAAE,eAAOP,IAAIO,GAAJ,CAAP;AAAkB,KAAxD,CAAX;AACA,WAAOQ,KAAKC,SAAL,CAAeH,IAAf,CAAP;AACH,CAHD;AAIA","file":"element.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.element = function (type, providedAttributes, providedChildren) {\n    var attributes = typeof providedAttributes !== 'undefined' ? providedAttributes : {};\n    var children = typeof providedChildren !== 'undefined' ? providedChildren : [];\n    var buildRoot = function () {\n        var map = flatMapNodes(type, attributes, children);\n        return { map: map, toJson: function () { return mapToJson(map); } };\n    };\n    return {\n        attributes: attributes,\n        children: children,\n        type: type,\n        build: buildRoot,\n    };\n};\nvar flatMapNodes = function (type, attributes, childElements, map, keyPrefix) {\n    if (map === void 0) { map = {}; }\n    if (keyPrefix === void 0) { keyPrefix = ''; }\n    var key = keyPrefix !== '' ? keyPrefix + \"_\" + type : type;\n    var children = [];\n    map[key] = {\n        id: key,\n        type: type,\n        attributes: attributes,\n        children: children,\n    };\n    childElements.forEach(function (childElement) {\n        var childKey = key + \"_\" + childElement.type;\n        children.push(childKey);\n        flatMapNodes(childElement.type, childElement.attributes, childElement.children, map, key);\n    });\n    return map;\n};\n// from object to json array\nvar mapToJson = function (map) {\n    var list = Object.keys(map).map(function (key) { return map[key]; });\n    return JSON.stringify(list);\n};\n//# sourceMappingURL=element.js.map"]}