package com.laidpack.sourcerer.service

import android.content.Context
import android.util.Log
import com.laidpack.sourcerer.service.adapters.*
import com.squareup.moshi.*
import java.lang.Exception
import java.lang.NullPointerException
import java.lang.reflect.Type
import kotlin.reflect.KClass


interface SerializerComponent<TAdapter : Any> {
    fun deserialize(type: KClass<*>, json: String): Any
    fun registerAdapter(
            subjectType: KClass<*>,
            adapter: Any,
            elementName: String? = null
    ): SerializerComponent<TAdapter>
    fun registerAutoGeneratedAdapter(
            subjectType: KClass<*>,
            adapterProvider: (Any) -> TAdapter?,
            elementName: String
    ): SerializerComponent<TAdapter>
    fun buildAdapters() : SerializerComponent<TAdapter>
    fun getAdapter(subjectType: KClass<*>): TAdapter
    fun getAttributeAdapter(elementName: String): TAdapter
    fun assignContext(context: Context)

    companion object {
        val instance by lazy { serviceLocator().serializerService }
        inline fun <reified T : Any> deserialize(json: String): T {
            return instance.deserialize(T::class, json) as T
        }
        fun registerAutoGeneratedAdapter(
                subjectType: KClass<*>,
                adapterProvider: (Any) -> Any?,
                elementName: String
        ): SerializerComponent<Any> {
            return instance.registerAutoGeneratedAdapter(
                    subjectType,
                    adapterProvider,
                    elementName
            )
        }
    }
}

class SerializerModule(
        defaultAdaptersList: List<Any> = listOf(
                DimensionAdapter(),
                ReferenceAdapter()
        )
) : SerializerComponent<JsonAdapter<out Any>> {
    private val registeredAdapters = mutableSetOf<KClass<*>>()
    private val elementNameToSubjectType = mutableMapOf<String, KClass<*>>()
    private lateinit var moshi: Moshi
    private var builder = Moshi.Builder()
    private val defaultAdapters : Map<KClass<*>, Any> = defaultAdaptersList.associateBy { it::class }
    // add default adapters
    init {
        if (BuildConfig.DEBUG) {
            builder.add(StrictAdapterFactory())
        }
        registerAdapter(LayoutMap::class, LayoutMapAdapter())
        for(adapter in defaultAdaptersList) {
            builder.add(adapter)
        }
        builder.add(LayoutElementAdapterFactory {
            elementNameToSubjectType
        })
        builder.add(MultiFormatAdapterFactory())
    }

    override fun assignContext(context: Context) {
        if (defaultAdapters.containsKey(ReferenceAdapter::class)) {
            val referenceAdapter = defaultAdapters[ReferenceAdapter::class] as ReferenceAdapter
            referenceAdapter.context = context
        }
    }

    override fun deserialize(type: KClass<*>, json: String): Any {
        val adapter = this.getAdapter(type)
        return adapter.fromJson(json)
                ?: throw NullPointerException("Adapter for '$type' resulted in null")
    }

    override fun registerAdapter(
            subjectType: KClass<*>,
            adapter: Any,
            elementName: String?
    ): SerializerComponent<JsonAdapter<out Any>> {
        try {
            builder.add(adapter)
            registeredAdapters.add(subjectType)

        } catch (e: Exception) {
            val msg = "Could not register adapter '${adapter::class.java}' for type '$subjectType'. \n\n${e.message}\n\n${e.stackTrace}"
            if (BuildConfig.DEBUG) throw IllegalArgumentException(msg)
            else Log.e(TAG, msg)
        }
        if (elementName != null) {
            elementNameToSubjectType[elementName] = subjectType
        }
        return this
    }
    override fun registerAutoGeneratedAdapter(
            subjectType: KClass<*>,
            adapterProvider: (Any) -> JsonAdapter<out Any>?,
            elementName: String
    ): SerializerComponent<JsonAdapter<*>> {
        registerAdapter(subjectType, { type: Type, annotations: Set<Annotation>, moshi: Moshi ->
            if (Types.getRawType(type) == subjectType) {
                adapterProvider(moshi)
            } else null
        }, elementName)
        return this
    }

    override fun buildAdapters(): SerializerComponent<JsonAdapter<out Any>> {
        moshi = builder.build()

        return this
    }

    override fun getAdapter(subjectType: KClass<*>): JsonAdapter<out Any> {
        if (!registeredAdapters.contains(subjectType)) {
            val msg = "Deserialization failed: class '$subjectType' is not registered as json adapter"
            if (BuildConfig.DEBUG) throw IllegalArgumentException(msg)
            else Log.e(TAG, msg)
        }
        return moshi.adapter(subjectType.java) as JsonAdapter<out Any>
    }

    override fun getAttributeAdapter(elementName: String): JsonAdapter<out Any> {
        val subjectType = elementNameToSubjectType[elementName]
            ?: throw IllegalArgumentException("Layout element '$elementName' has no registered adapter @ serializer service")

        return getAdapter(subjectType)
    }

    companion object {
        const val TAG = "SerializerModule"
    }
}

