package com.laidpack.sourcerer.service

import android.content.Context
import android.util.Log
import com.laidpack.sourcerer.service.adapters.*
import com.laidpack.sourcerer.service.api.ColorQualifier
import com.laidpack.sourcerer.service.api.DimensionQualifier
import com.laidpack.sourcerer.service.api.MultiFormat
import com.laidpack.sourcerer.service.api.ReferenceQualifier
import com.squareup.moshi.*
import java.lang.Exception
import java.lang.NullPointerException
import kotlin.reflect.KClass


interface SerializerComponent {
    fun deserialize(type: KClass<*>, json: String): Any
    fun registerAdapter(
            subjectType: KClass<*>,
            adapter: Any,
            elementName: String? = null
    ): SerializerComponent
    fun registerAutoGeneratedAdapter(
            subjectType: KClass<*>,
            adapterProvider: (Any) -> Any?,
            elementName: String
    ): SerializerComponent
    fun associateThisViewGroupWithLayoutParams(
            viewGroupElementName: String,
            layoutParamsElementName: String
    ): SerializerComponent
    fun buildAdapters() : SerializerComponent
    fun getAdapter(subjectType: KClass<*>): Any
    fun getAttributeAdapter(elementName: String): Any
    fun assignContext(context: Context)
    fun assignDefaultLayoutParameterDelegate(layoutParamsType: KClass<*>)

    companion object {
        val instance by lazy { serviceLocator().serializerService }
        inline fun <reified T : Any> deserialize(json: String): T {
            return instance.deserialize(T::class, json) as T
        }
        fun registerAutoGeneratedAdapter(
                subjectType: KClass<*>,
                adapterProvider: (Any) -> Any?,
                elementName: String
        ): SerializerComponent {
            return instance.registerAutoGeneratedAdapter(
                    subjectType,
                    adapterProvider,
                    elementName
            )
        }
        fun associateThisViewGroupWithLayoutParams(
                viewGroupElementName: String,
                layoutParamsElementName: String
        ): SerializerComponent {
            return instance.associateThisViewGroupWithLayoutParams(
                    viewGroupElementName,
                    layoutParamsElementName
            )
        }
    }
}

class SerializerModule(
        defaultQualifierAdaptersList: List<Pair<KClass<*>, Any>> = listOf(
                DimensionQualifier::class to DimensionAdapter(),
                ReferenceQualifier::class to ReferenceAdapter(),
                ColorQualifier::class to ColorAdapter(),
                MultiFormat::class to MultiFormatAdapterFactory()
        )
) : SerializerComponent {
    private val registeredAdapters = mutableMapOf<KClass<*>, (moshi: Moshi) -> Any?>()
    private val elementNameToSubjectType = mutableMapOf<String, KClass<*>>()
    private val viewGroupToLayoutParams = mutableMapOf<String, String>()
    private lateinit var moshi: Moshi
    private lateinit var defaultLayoutParamsDelegateProvider: () -> LayoutParamsDelegateWrapper
    private lateinit var defaultLayoutParamsDelegate: LayoutParamsDelegateWrapper
    private var builder = Moshi.Builder()
    private val defaultAdapters : Map<KClass<*>, Any> = defaultQualifierAdaptersList.associateBy { it::class }
    // add default adapters
    init {
        /* currently, we cannot use strict mode since we allow attributes json object be parsed into view and lp attributes
        if (BuildConfig.DEBUG) {
            builder.add(StrictAdapterFactory())
        }*/
        for(adapterPair in defaultQualifierAdaptersList) {
            val (subjectType, delegate) = adapterPair
            registerAdapter(subjectType, delegate)
        }
        registerAdapter(LayoutMap::class, LayoutMapAdapterFactory(
                { elementName ->
                    val layoutParamsElementName = viewGroupToLayoutParams[elementName] ?: throw  IllegalArgumentException("No view group registered with element name '$elementName")
                    val subjectType = elementNameToSubjectType[layoutParamsElementName] ?: throw  IllegalArgumentException("No layout params adapter registered with element name '$layoutParamsElementName")
                    LayoutParamsDelegateWrapper(layoutParamsElementName, getAdapter(subjectType))
                },
                { defaultLayoutParamsDelegate }
        ))
        registerAdapter(LayoutProperties::class, LayoutElementAdapterFactory {
            elementNameToSubjectType
        })
    }

    override fun assignContext(context: Context) {
        if (defaultAdapters.containsKey(ReferenceAdapter::class)) {
            val referenceAdapter = defaultAdapters[ReferenceAdapter::class] as ReferenceAdapter
            referenceAdapter.context = context
        }
    }

    override fun assignDefaultLayoutParameterDelegate(layoutParamsType: KClass<*>) {
        defaultLayoutParamsDelegateProvider = {LayoutParamsDelegateWrapper(
                layoutParamsType.java.canonicalName as String,
                getAdapter(layoutParamsType)
        )}
    }

    override fun deserialize(type: KClass<*>, json: String): Any {
        val adapter = this.getAdapter(type)
        return adapter.fromJson(json)
                ?: throw NullPointerException("Adapter for '$type' resulted in null")
    }

    override fun registerAdapter(
            subjectType: KClass<*>,
            adapter: Any,
            elementName: String?
    ): SerializerComponent {
        try {
            when (adapter) {
                is JsonAdapter<*> -> registeredAdapters[subjectType] = { adapter }
                is JsonAdapter.Factory -> { //ensures it is cast from Any to Factory
                    builder.add(adapter)
                    registeredAdapters[subjectType] = { moshi -> moshi.adapter(subjectType.java)}
                }
                else -> {
                    builder.add(adapter)
                    registeredAdapters[subjectType] = { moshi -> moshi.adapter(subjectType.java)}
                }
            }
        } catch (e: Exception) {
            throw IllegalArgumentException("Could not register adapter '${adapter::class.java}' for type '$subjectType'. \n\n${e.message}\n\n${e.stackTrace}")
        }
        if (elementName != null) {
            elementNameToSubjectType[elementName] = subjectType
        }
        return this
    }
    override fun registerAutoGeneratedAdapter(
            subjectType: KClass<*>,
            adapterProvider: (Any) -> Any?,
            elementName: String
    ): SerializerComponent {
        try {
            registeredAdapters[subjectType] = adapterProvider as (Moshi) -> Any?
            elementNameToSubjectType[elementName] = subjectType
        } catch (e: Exception) {
            val msg = "Could not register auto-generated adapter with type '$subjectType' for element '$elementName'. \n\n${e.message}\n\n${e.stackTrace}"
            if (BuildConfig.DEBUG) throw IllegalArgumentException(msg)
            else Log.e(TAG, msg)
        }
        return this
    }

    override fun associateThisViewGroupWithLayoutParams(
            viewGroupElementName: String,
            layoutParamsElementName: String
    ): SerializerComponent {
        viewGroupToLayoutParams[viewGroupElementName] = layoutParamsElementName
        return this
    }

    override fun buildAdapters(): SerializerComponent {
        moshi = builder.build()
        defaultLayoutParamsDelegate = defaultLayoutParamsDelegateProvider()

        return this
    }

    override fun getAdapter(subjectType: KClass<*>): JsonAdapter<out Any> {
        val delegateProvider = registeredAdapters[subjectType] ?: throw IllegalArgumentException( "Class '$subjectType' is not registered as json adapter")
        val delegate = delegateProvider(moshi) ?: throw IllegalArgumentException( "Delegate for '$subjectType' could not be provided")
        if (delegate !is JsonAdapter<*>) throw IllegalStateException("Delegate provider for '$subjectType' did not create an JsonAdapter<*>, instead it returned '${delegate::class.java.canonicalName}'")
        return delegate
    }

    override fun getAttributeAdapter(elementName: String): JsonAdapter<out Any> {
        val subjectType = elementNameToSubjectType[elementName]
            ?: throw IllegalArgumentException("Layout element '$elementName' has no registered adapter @ serializer service")

        return getAdapter(subjectType)
    }

    companion object {
        const val TAG = "SerializerModule"
    }
}

