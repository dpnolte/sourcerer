apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'idea'

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation files("$sdkDir/platforms/android-$compileSdkVersion/android.jar")
    // bug -> https://youtrack.jetbrains.com/issue/KT-23744
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // override reflect version number in xodus dnq and kotlin poet
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.squareup:kotlinpoet:1.0.0-RC1'
    implementation "com.squareup.moshi:moshi:$moshi"

    // java parser
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.6.27'
    implementation 'com.github.javaparser:javaparser-core-serialization:3.6.27'
    // serializing java parser nodes
    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.3'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.3'

    // xodus data persistency
    implementation 'org.jetbrains.xodus:xodus-openAPI:1.2.3'
    implementation 'org.jetbrains.xodus:xodus-entity-store:1.2.3'
    implementation 'org.jetbrains.xodus:dnq:1.1.325'
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.25'
    // typescript annotation
    api "com.github.dpnolte.ts-rhymer:api:$tsRhymerVersion"
    api project(':typescript-api')
    // lint
    implementation "com.android.tools.lint:lint:$lintVersion"
    // colored print
    implementation 'com.github.ajalt:mordant:1.2.0'

    testImplementation "com.nhaarman:mockito-kotlin:1.6.0"
    testImplementation 'org.amshove.kluent:kluent:1.37'
    testImplementation 'org.amshove.kluent:kluent-android:1.37'
    // override reflection number in mockito and in kluent
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation 'junit:junit:4.12'
}

idea {
    module {
        excludeDirs += file("bin")
        excludeDirs += file("indexed")
    }
}

evaluationDependsOn(':stub-module')
def componentIds = project(":stub-module").configurations.debugCompileClasspath.incoming.resolutionResult.allDependencies
        .findAll {
            if (it instanceof UnresolvedDependencyResult) {
              print("Unresolved dependency: ${it.getAttempted().displayName}. Reason: ${it.getFailure().localizedMessage}.")
            } else {
              it.selected.id instanceof ModuleComponentIdentifier && (it.selected.id.group == "com.google.android.material" || it.selected.id.group.startsWith("androidx."))
            }
        }
        .collect {
            it.selected.id
        }

def result = dependencies.createArtifactResolutionQuery()
        .forComponents(componentIds)
        .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
        .execute()

def sourceArtifacts = []
def i = 0
for (component in result.resolvedComponents) {
    component.getArtifacts(SourcesArtifact).each {
        sourceArtifacts.add(i, it.file)
        i += 1
    }
}
def libFiles = project(":stub-module").configurations.debugCompileClasspath.filter {
    if (it.name.startsWith("project ")) {
        println "filtered ${it.name}"
        return false
    } else {
        return true
    }
}.collect()


def taskArgs = [
        rootDir.absolutePath,
        compileSdkVersion,
        sdkDir,
        libFiles,
        sourceArtifacts,
        minSdkVersion
]
task analyzeSource(type: JavaExec) {
    main = 'com.laidpack.sourcerer.generator.AnalyzeSourceKt'
    classpath = sourceSets.main.runtimeClasspath
    args = taskArgs
}
task analyzeClass(type: JavaExec) {
    main = 'com.laidpack.sourcerer.generator.AnalyzeClassKt'
    classpath = sourceSets.main.runtimeClasspath
    args = taskArgs
}
task analyzeClassWithoutIndexing(type: JavaExec) {
    main = 'com.laidpack.sourcerer.generator.AnalyzeClassWithoutIndexingKt'
    classpath = sourceSets.main.runtimeClasspath
    args = taskArgs
}
task generateFiles(type: JavaExec) {
    main = 'com.laidpack.sourcerer.generator.GenerateFilesKt'
    classpath = sourceSets.main.runtimeClasspath
    args = taskArgs
}

// extra task in sourcerer.. otherwise app:lint gets executed before analyze source
task performLint() {
    //dependsOn(":stub-app:clean")
    dependsOn(":stub-app:lint")
}

task generate(type: JavaExec) {
    dependsOn analyzeSource
    main = 'com.laidpack.sourcerer.generator.ModuleDistributorKt'
    classpath = sourceSets.main.runtimeClasspath
    args = taskArgs
    finalizedBy(rootProject.tasks.clean)
}

task printAllFormats(type: JavaExec) {
    main = 'com.laidpack.sourcerer.generator.PrintAllFormatsKt'
    classpath = sourceSets.main.runtimeClasspath
    args = taskArgs
}

task printEnvArguments(type: JavaExec) {
    main = 'com.laidpack.sourcerer.generator.PrintArgumentsKt'
    classpath = sourceSets.main.runtimeClasspath
    args = taskArgs
    doFirst {
/*        taskArgs[3].each {
            println "file in stub-app classpath: $it"
        }*/
        classpath.each {
            println "file in classpath: $it"
        }
        project(":stub-module").configurations.debugCompileClasspath.incoming.resolutionResult.allDependencies.each {
            println "dependency: $it, variant: ${it.selected.variant.displayName}"

        }
        sourceArtifacts.each {
            println "source artifact: $it"
        }
    }
}

task printUsedAndroidXLibs(type: JavaExec) {
    main = 'com.laidpack.sourcerer.generator.PrintUsedAndroidXLibsKt'
    classpath = sourceSets.main.runtimeClasspath
    args = taskArgs
}

task moduleDistributor(type: JavaExec) {
    main = 'com.laidpack.sourcerer.generator.ModuleDistributorKt'
    classpath = sourceSets.main.runtimeClasspath
    args = taskArgs
}

task copyAndroidJar(type: Copy) {
    from "$sdkDir/platforms/android-$compileSdkVersion/android.jar"
    into 'libs'
}
//build.dependsOn copyAndroidJar
